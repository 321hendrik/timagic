#!/usr/bin/env python
__author__      = "Hendrik Elsner"
__copyright__   = "Copyleft 2015"
__email__ = "321hendrik@gmail.com"
__version__ = "2.4"

import os
import sys
import subprocess
import datetime
import time
import json
import xml.dom.minidom as dom
from multiprocessing import Process
import readline

readline.parse_and_bind('tab: complete')
readline.parse_and_bind('set editing-mode vi')

settings = {
    'adb_path': '',
    'apk_output_path': '',
    'keystore_path': '',
    'keystore_alias': '',
    'keystore_pw': '',
    'ipa_output_path': '',
    'distribution_name': '',
    'pp_uuid': '',
    'distribution_path': '',
    'distribution_base_url': '',
    'latest_ios_version': ''
}

def shell_exec(arg):
    ''' takes a 'string' or list of shell commands and executes it '''
    command = ''
    if type(arg) is list:
        command = ' '.join(arg)
    elif type(arg) is str:
        command = arg
    os.system(command);

def color(color_string, string):
    colors = {
        'yellow' : '\033[93m',
        'red': '\033[91m',
        'green': '\033[92m',
        'blue': '\033[94m',
        'aqua': '\033[96m',
        'end': '\033[0m'
    }
    return colors[color_string] + string + colors['end']

def get_datecode():
    ''' get the number of the current day '''
    return datetime.date.today().timetuple().tm_yday

def get_from_xml(xml_path, key):
    ''' get the value for a key from an xml-file '''
    xml_tree = dom.parse(xml_path)
    value = 'none'
    for node in xml_tree.firstChild.childNodes:
        if node.nodeName == key:
            if not node.firstChild:
                return False
            value = node.firstChild.data.strip()
    return value

def get_from_json(json_path, key):
    ''' get the value for a key from an json-file '''
    with open(json_path) as data_file:
        data = json.load(data_file)
        if not key in data:
            return False
        return data[key]

def remove_apk(**kwargs):
    print '...trying to uninstall APK from ' + kwargs['device_id']
    shell_exec([settings['adb_path'], '-s', kwargs['device_id'], 'uninstall', kwargs['app_id']])

def install_apk(**kwargs):
    print '...trying to install APK to ' + kwargs['device_id']
    shell_exec([settings['adb_path'], '-s', kwargs['device_id'], 'install', '-r', kwargs['apk_path']])

def start_app_activity(**kwargs):
    print '...trying to launch Activity on ' + kwargs['device_id']
    # form activity name
    activity_name = kwargs['app_name_no_spaces'].lower().title()
    shell_exec([settings['adb_path'], '-s', kwargs['device_id'], 'shell', 'am', 'start', '-n', (kwargs['app_id'] + '/' + kwargs['app_id'] + '.' + activity_name + 'Activity')])

def deploy_apk(**kwargs):
    ''' installs an apk to all connected adb devices and removes the old version if necessary '''
    install_apk(device_id=kwargs['device_id'], apk_path=kwargs['apk_path'])
    start_app_activity(device_id=kwargs['device_id'], app_id=kwargs['app_id'], app_name_no_spaces=kwargs['app_name_no_spaces'])

def deploy_ipa(**kwargs):
    print '...trying to install IPA to ' + kwargs['device_id']
    shell_exec(['ideviceinstaller', '-U', kwargs['device_id'], '-i', kwargs['ipa_path']])

def remove_ipa(**kwargs):
    print '...trying to uninstall IPA from ' + kwargs['device_id']
    shell_exec(['ideviceinstaller', '-U', kwargs['device_id'], '-u', kwargs['app_id']])

def print_version_and_info():
    print color('green', 'TiMagic v' +__version__) + ' created by ' + __author__ + ' (' + __email__ + ')' + ' ' + __copyright__

def print_cli_help(has_libimobiledevice):
    ''' prints the cli help '''
    shell_exec('clear')
    print color('green', 'TiMagic v' +__version__) + ' created by ' + __author__ + ' (' + __email__ + ')' + ' ' + __copyright__
    # if not has_libimobiledevice:
    #     print '! To unlock additional features install https://github.com/benvium/libimobiledevice-macosx !'
    print ''
    print color('yellow', 'usage: magic ([action]) ([ios_version])')
    print ''
    print ' General Actions ' + '-'*60
    print color('green','install') + ' ([ios_version])' + ('\t'*2) + ': installs to all connected devices'
    print color('green','remove') + ('\t'*4) + ': removes the app from all connected ' + ('' if has_libimobiledevice else 'android ') + 'devices'
    print color('green','clean') + ('\t'*4) + ": cleans the project's build directory"
    print color('green','dist') + ' [dist_suffix]' + ('\t'*2) + ": create a distribution website ( optionally with custom path )"
    print ''
    print ' Android Actions ' + '-'*60
    print color('green','apk') + ('\t'*4) +': creates a signed APK in dist subdirectory'
    print color('green','todevice') + ('\t'*3) + ': installs signed APK from previous build to all connected android devices'
    print color('green','todeviceU') + ('\t'*3) + ': installs unsigned APK from previous build to all connected android devices'
    print ''
    print ' iOS Actions ' + '-'*60
    print color('green','iphone') + ' | ' + color('green','ipad') + ' [ios_version]' + ('\t'*1) + ': launches the iphone or ipad simulator for the given project'
    print color('green','ipa') + ' [ios_version]' + ('\t'*2) + ': creates an ad-hoc IPA in dist subdirectory'
    # if (not has_libimobiledevice):
    #     print ''
    #     print color('red', 'You can unlock additional functionality by installing these dependencies: ' + ('libimobiledevice' if not has_libimobiledevice else '') + (', ' if (not has_libimobiledevice) else ''))
    #     print color('red', 'For installation instructions visit https://github.com/hendrikelsner/timagic')
    #     print ''
    # else:
    #     print ''
    print ''

def generate_plist(params):
    ''' generates a plist file for use with an app download link '''
    url = params['url'] + params['project_id'] + '/' + params['title'] + '.ipa'

    plist = '''
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>items</key>
            <array>
                <dict>
                    <key>assets</key>
                    <array>
                        <dict>
                            <key>kind</key>
                            <string>software-package</string>
                            <key>url</key>
                            <string>{{URL}}</string>
                        </dict>
                    </array>
                    <key>metadata</key>
                    <dict>
                        <key>bundle-identifier</key>
                        <string>{{BUNDLE ID}}</string>
                        <key>bundle-version</key>
                        <string>{{BUNDLE VERSION}}</string>
                        <key>kind</key>
                        <string>software</string>
                        <key>title</key>
                        <string>{{TITLE}}</string>
                    </dict>
                </dict>
            </array>
        </dict>
        </plist>
    '''
    plist = plist.replace('{{URL}}', url);
    plist = plist.replace('{{BUNDLE ID}}', params['bundle_id']);
    plist = plist.replace('{{BUNDLE VERSION}}', params['bundle_version']);
    plist = plist.replace('{{TITLE}}', params['title']);

    with open(params['dist_dir'] + '/manifest.plist', 'w') as f:
        f.write(plist);

def generate_microsite(params):
    ''' generates a microsite displaying devices dependent download links '''
    project_url = params['url'] + params['project_id']
    ios_link = project_url + '/' + 'manifest.plist'
    android_link = project_url + '/' + params['title'] + '.apk'
    title_with_version = params['title'] + ' (' + params['bundle_version'] + ')'

    html = '''
        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
        <html xmlns="http://www.w3.org/1999/xhtml">
            <head>
                <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
                <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
                <title>{{TITLE}}</title>
                <style type="text/css">
                    body {
                        background: #eee;
                        margin: 0;
                        padding: 0;
                        font-family: verdana,helvetica,sans-serif;
                        text-align: center;
                        padding: 10px;
                        font-size: 16px;
                    }
                    #container {
                        width:300px;
                        margin:0 auto;
                    }
                    .headline {
                        margin:0;
                        padding:0;
                        font-size:16px;
                    }
                    p {
                        font-size:13px;
                    }
                    .link {
                        display: none;
                        border: 1px solid #1f8dc5;
                        margin-top: .5em;
                        padding: .3em;
                    }
                    .link a {
                        text-decoration:none;
                        font-size:15px;
                        display:block;
                        color:#1f8dc5;
                    }
                    .last_updated {
                        font-size: x-small;
                        text-align: center;
                        font-style: italic;
                    }
                    .created_with {
                        font-size: x-small;
                        text-align: center;
                    }
                    .created_with a {
                        color: #aaa;
                    }
                    #no-device-info {
                        display: none;
                    }
                </style>
            </head>
            <body>
                <div id="container">
                    <p><img src='Icon.png' length='57' width='57' /></p>
                    <p class="headline">Install Link</p>
                    <div id="ios-link" class="link">
                        <a href="itms-services://?action=download-manifest&url={{IOS LINK}}">Tap Here to Install<br />{{TITLE}}<br />Directly On Your iOS Device</a>
                    </div>
                    <div id="android-link" class="link">
                        <a href="{{ANDROID LINK}}">Tap Here to Install<br />{{TITLE}}<br />Directly On Your Android Device</a>
                    </div>
                    <div id="no-device-info">
                        <p>Make sure you are visiting this page on your device, not your computer.<br /></p>
                    </div>
                    <p class="last_updated">Last Updated: {{CURRENT DATE}}</p>
                </div>
                <script type="text/javascript">
                    var device = navigator.userAgent;
                    if ((device.indexOf("iPhone") > -1) || (device.indexOf("iPad") > -1)) {
                        document.getElementById("ios-link").style.display = "block";
                    } else if (device.indexOf("Android") > -1) {
                        document.getElementById("android-link").style.display = "block";
                    } else {
                        document.getElementById("no-device-info").style.display = "block";
                    }
                </script>
            </body>
        </html>
    '''
    html = html.replace('{{TITLE}}', title_with_version)
    html = html.replace('{{ANDROID LINK}}', android_link)
    html = html.replace('{{IOS LINK}}', ios_link)
    html = html.replace('{{CURRENT DATE}}', params['date'])

    with open(params['dist_dir'] + '/index.html', 'w') as f:
        f.write(html);

def distribute(project_id, bundle_id, bundle_version, title, icon_path):
    ''' generates files and folders for microsite distribution and returns the distribution directory '''
    app_info = {
        'url': settings['distribution_base_url'],
        'project_id': project_id,
        'datecode': str(get_datecode()),
        'bundle_id': bundle_id,
        'bundle_version': bundle_version,
        'title': title,
        'date': time.strftime('%d.%m.%Y %H:%M Uhr'),
    }

    # create distribute directory for files
    if settings['distribution_path']:
        app_info['dist_dir'] = settings['distribution_path'] + 'distribute_' + app_info['project_id']
    else:
        app_info['dist_dir'] = settings['project_path'] + '/dist_sites/' + app_info['project_id']

    if not os.path.exists(app_info['dist_dir']):
        os.makedirs(app_info['dist_dir'])

    # generate files
    generate_plist(app_info)
    generate_microsite(app_info)

    # copy icon file
    with open(icon_path, 'r') as source:
        with open(app_info['dist_dir'] + '/Icon.png', 'w') as target:
            target.write(source.read());

    return app_info['dist_dir']

def get_latest_ios_sdk_version():
    cmd_output = subprocess.check_output('xcodebuild -showsdks | grep "iphoneos"', shell=True);
    cmd_output = cmd_output.replace('\n', '').split('iphoneos')
    if len(cmd_output) > 0:
        return cmd_output[-1]
    else:
        return False

def main():
    ''' main cli interface function '''
    # global vars
    last_choice = ''
    script_path = '/'.join(sys.argv[0].split('/')[0:-1]) + '/'
    script_path = '' if (len(script_path) == 1) else script_path

    # get setting from settings file
    config_json_path = script_path + 'timagic_settings.json'

    for elem in settings:
        settings[elem] = get_from_json(config_json_path, elem)

    # UI variables
    notification = '\n'

    # check if libimobiledevice is installed (currently disabled)
    has_libimobiledevice = False
    # try:
    #     subprocess.call('idevice_id', stdout=subprocess.PIPE)
    #     has_libimobiledevice = True
    # except:
    #     print 'libimobiledevice is not installed...'

    # get user input
    if  len(sys.argv) < 2:
        print color('red', '\n --> malformed call (use "--help" flag to lookup usage)\n')
        return

    user_input = sys.argv[1]

    ios_version = ''

    project_path = os.getcwd();

    settings['project_path'] = project_path

    # set dist dir cwd-dependent if not set in settings.xml
    if not settings['apk_output_path']:
        settings['apk_output_path'] = project_path + '/dist/';

    if not settings['ipa_output_path']:
        settings['ipa_output_path'] = project_path + '/dist/';

    # print help
    if str(user_input) in ['-h', '--help', 'help']:
        print_cli_help(has_libimobiledevice)
        return

    # print version and info
    if str(user_input) in ['-v', '--version', 'version']:
        print_version_and_info()
        return

    # try to get project name from cwd
    project_name = project_path.split("/")[-1:][0]

    input_params = sys.argv[1]

    dist_suffix = project_name
    if len(sys.argv) > 2:
        if len(sys.argv[2]) < 4:
            ios_version += sys.argv[2]
        else:
            dist_suffix = sys.argv[2]

    # detect ios version if not given
    ios_version = ios_version or get_latest_ios_sdk_version()
    if not ios_version:
        print color('red', '\n --> could not detect latest ios sdk\n')
        return

    # get build parameters
    tiapp_xml_path = project_path + '/tiapp.xml'
    sdk_version = get_from_xml(tiapp_xml_path, 'sdk-version')
    app_id = get_from_xml(tiapp_xml_path, 'id')
    app_version = get_from_xml(tiapp_xml_path, 'version')
    app_name = get_from_xml(tiapp_xml_path, 'name')
    app_name_escaped_spaces = app_name.replace(' ', '\ ')
    app_name_no_spaces = app_name.replace(' ', '');
    icon_path = project_path + '/Resources/iphone/' + get_from_xml(tiapp_xml_path, 'icon')

    # use large icon file
    icon_path_name = icon_path.split('/')[-1].split('.')
    icon_path = icon_path.split('/')[0:-1]
    icon_path.append('@2x.'.join(icon_path_name))
    icon_path = '/'.join(icon_path)

    # clear project
    if str(user_input) in ['-c', '--clean', 'clean']:
        shell_exec(['titanium', 'clean', '-d', project_path])
        return

    # get lists of connected devices
    android_device_list = subprocess.check_output(settings['adb_path'] + ' devices | grep device', shell=True).replace('\tdevice','').split('\n')[1:-1]

    # libimobiledevice bug @todo
    if has_libimobiledevice:
        ios_device_list = []#subprocess.check_output('idevice_id -l', shell=True).split('\n')[0:-1] if has_libimobiledevice else []
    else:
        ios_device_list = []

    # base titanium cli command
    base_command = ['titanium', 'build', '-d', project_path, '-s', sdk_version]

    if input_params in ['', 'install', 'todevice', 'todeviceU', 'remove']:

        android_connected = True if len(android_device_list) else False
        ios_connected = True if len(ios_device_list) else False

        if android_connected or ios_connected:
            if input_params in ['', 'install']:
                build_processes = {}
                if android_connected:
                    # default build for android devices
                    print 'building unsigned APK'
                    build_command_apk = base_command + ['--platform', 'android', '-b']
                    build_processes['android'] = Process( target=shell_exec, args=(build_command_apk,) )

                if ios_connected:
                    # default build for ios devices
                    print 'building ad-hoc IPA'
                    if settings['distribution_name'] and settings['pp_uuid']:
                        build_command_ipa = base_command + ['--platform', 'ios', '-R', settings['distribution_name'], '-I', ios_version, '-P', settings['pp_uuid'], '-O', settings['ipa_output_path'], '-T', 'dist-adhoc']
                    else:
                        build_command_ipa = base_command + ['--platform', 'ios', '-I', ios_version, '-O', settings['ipa_output_path'], '-T', 'dist-adhoc']
                    build_processes['ios'] = Process( target=shell_exec, args=(build_command_ipa,) )

                # start parallel builds and wait for them to finish
                for platform in build_processes:
                    build_processes[platform].start()
                    build_processes[platform].join()


            # install to connected devices
            apk_path = ''
            android_kwargs = { 'app_id': app_id }
            if android_connected:
                # get app path
                if input_params == 'todevice':
                    apk_path = settings['apk_output_path'] + app_name_escaped_spaces + '.apk'
                else:
                    apk_path = project_path +'/build/android/bin/' + (app_name_no_spaces if float(sdk_version[0:3]) >= 3.2 else 'app') + '.apk'

            ipa_path = ''
            ios_kwargs = {}
            if ios_connected:
                # get app path
                ipa_path = settings['ipa_output_path'] + app_name_escaped_spaces + '.ipa'

            # remove or install
            if input_params == 'remove':
                operation = 'removing from'

                android_target = remove_apk

                ios_target = remove_ipa
                ios_kwargs['app_id'] = app_id
            else:
                operation = 'installing to'

                android_target = deploy_apk
                android_kwargs['apk_path'] = apk_path
                android_kwargs['app_name_no_spaces'] = app_name_no_spaces

                ios_target = deploy_ipa
                ios_kwargs['ipa_path'] = ipa_path

            parallel_install_processes = {}
            # install the apk to all connected android devices
            print project_name + ' ' + operation + ' all android devices...'
            for device_id in android_device_list:
                android_kwargs['device_id'] = device_id
                parallel_install_processes[device_id] = Process(target=android_target, kwargs=android_kwargs)
                parallel_install_processes[device_id].start()

            # install the ipa to all connected ios devices
            print project_name + ' ' + operation + ' all iOS devices...'
            for device_id in ios_device_list:
                ios_kwargs['device_id'] = device_id
                parallel_install_processes[device_id] = Process(target=ios_target, kwargs=ios_kwargs)
                parallel_install_processes[device_id].start()

            # wait for parallel installation processes to finish
            for device_id in parallel_install_processes:
                parallel_install_processes[device_id].join()
        else:
            notification =  color('red', '\n --> Please connect a device first.\n')

    elif input_params == 'clean':
        shell_exec(['titanium', 'clean', '-d', project_path])

    elif input_params == 'ipa':
        # build ad-hoc IPA for given iOS-version
        if settings['distribution_name'] and settings['pp_uuid']:
            shell_exec(base_command + ['-p', 'ios', '-R', settings['distribution_name'], '-I', ios_version, '-P', settings['pp_uuid'], '-O', settings['ipa_output_path'], '-T', 'dist-adhoc'])
        else:
            shell_exec(base_command + ['-p', 'ios', '-I', ios_version, '-T', 'dist-adhoc'])

    elif input_params == 'ipad' or input_params == 'iphone':
        # Install to and launch given iOS-Simulator
        shell_exec(base_command + ['-p', 'ios', '-I', ios_version, '-Y', input_params, '-S', ios_version, '-T', 'simulator'])

    elif input_params == 'apk':
        # build Play-Store APK
        password_flag = ('--store-password' if float(sdk_version[0:3]) >= 3.2 else '--password')
        shell_exec(base_command + ['-p', 'android', '-K', settings['keystore_path'], '-L', settings['keystore_alias'], password_flag, settings['keystore_pw'], '-O', settings['apk_output_path'], '-T', 'dist-playstore'])

    elif (input_params in ['dist', 'distbuild']):
        # generate distribution files
        print 'generating files for distribution'
        dist_path = distribute(dist_suffix, app_id, app_version, app_name, icon_path)

        # generate distribution binaries
        if input_params == 'distbuild':
            # build ipa and apk
            password_flag = ('--store-password' if float(sdk_version[0:3]) >= 3.2 else '--password')
            apk_build_process = Process(target=shell_exec, args=(base_command + ['-p', 'android', '-K', settings['keystore_path'], '-L', settings['keystore_alias'], password_flag, settings['keystore_pw'], '-O', dist_path, '-T', 'dist-playstore'],))

            if settings['distribution_name'] and settings['pp_uuid']:
                ipa_build_process = Process(target=shell_exec, args=(base_command + ['-p', 'ios', '-R', settings['distribution_name'], '-I', ios_version, '-P', settings['pp_uuid'], '-O', dist_path, '-T', 'dist-adhoc'],))
            else:
                ipa_build_process = Process(target=shell_exec, args=(base_command + ['-p', 'ios', '-I', ios_version, '-O', dist_path, '-T', 'dist-adhoc'],))

            apk_build_process.start()
            ipa_build_process.start()

            apk_build_process.join()
            ipa_build_process.join()

            # rename app files
            dist_path += '/'
            shell_exec(['mv', (dist_path + app_name_escaped_spaces + '.ipa'), (dist_path + app_name_escaped_spaces + '.ipa')])
            shell_exec(['mv', (dist_path + app_name_escaped_spaces + '.apk'), (dist_path + app_name_escaped_spaces + '.apk')])

        print 'finished generating files for distribution'
    else:
        print color('red', 'unknown action: ' + input_params + ' (use --help flag to lookup available actions)')

if __name__ == '__main__':
    # execute CLI
    main()